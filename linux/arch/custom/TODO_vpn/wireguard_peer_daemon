#!/usr/bin/env python3

import os
import re
import contextlib
import socketserver
import pwd
import grp
import ipaddress
import subprocess
import json
from typing import Optional, Dict, Any

class WireguardConfig:
    _FIELD_RE = re.compile(r'^(?P<key>[a-zA-Z]+)\s*=\s*(?P<value>.+)$')

    def __init__(self):
        self._interface = None
        self._peers = {}
        self._parse()

    def write(self):
        if self._interface is None:
            raise Exception('Interface missing')
        with open('/etc/wireguard/wg0.conf', 'w') as f:
            block_sources = [self._interface, *self._peers.values()]
            blocks = map(self._construct_block, block_sources)
            f.write('\n\n'.join(blocks) + '\n')

    def has_peer(self, public_key: str) -> bool:
        return public_key in self._peers

    def add_peer(self, public_key: str, endpoint: Optional[str]=None) -> dict:
        if public_key in self._peers:
            raise Exception(f'Peer already exists for public key {public_key}')
        psk = self._gen_psk()
        address = self._get_available_address()

        # add new peer to own config
        peer = {
            'type': 'Peer',
            'fields': {
                'PublicKey': public_key,
                'PresharedKey': psk,
                'AllowedIPs': str(ipaddress.IPv4Network(address)),
            }
        }
        if endpoint:
            peer['fields']['Endpoint'] = endpoint
        self._peers[public_key] = peer

        if self._interface is None:
            raise Exception('Interface missing')

        interface_fields = self._interface['fields']
        ip_interface = ipaddress.IPv4Interface(interface_fields['Address'])

        # return new peer as interface and interface as peer
        return {
            'interface': {
                'type': 'Interface',
                'fields': {
                    'Address': str(ipaddress.IPv4Interface((
                        str(address),
                        str(ipaddress.IPv4Interface(interface_fields['Address']).netmask)
                    ))),
                }
            },
            'peer': {
                'type': 'Peer',
                'fields': {
                    'PublicKey': self._get_pubkey(),
                    'PresharedKey': psk,
                    'AllowedIPs': str(ipaddress.IPv4Network(ip_interface.ip)),
                    # peer is expected to know how to substitute the IP/host
                    'Endpoint': f'0.0.0.0:{interface_fields["ListenPort"]}',
                }
            }
        }

    def set_peer_endpoint(self, public_key: str, preshared_key: str, endpoint: str) -> dict:
        peer = self._peers[public_key]
        if peer['fields']['PresharedKey'] != preshared_key:
            raise Exception(f'Invalid PSK: {preshared_key}')
        peer['fields']['Endpoint'] = endpoint
        return peer

    def _get_available_address(self) -> ipaddress.IPv4Address:
        interface = self._get_ip_interface()
        network = interface.network
        reserved = {interface.ip, network.network_address}
        for peer in self._peers.values():
            for peer_network in peer['fields']['AllowedIPs'].split(', '):
                peer_network = ipaddress.IPv4Network(peer_network)
                if peer_network.subnet_of(network):
                    reserved |= set(peer_network)
        for ip in network:
            if ip not in reserved:
                return ip
        raise Exception('Address space exhausted')

    def _get_ip_interface(self):
        if self._interface is None:
            raise Exception('Interface missing')
        return ipaddress.IPv4Interface(self._interface['fields']['Address'])

    def _parse(self):
        with open('/etc/wireguard/wg0.conf') as f:
            for block in f.read().split('\n\n'):
                parsed_block = self._parse_block(block)
                if parsed_block['type'] == 'Interface':
                    self._interface = parsed_block
                elif parsed_block['type'] == 'Peer':
                    self._peers[parsed_block['fields']['PublicKey']] = parsed_block

    def _parse_block(self, block: str) -> dict:
        block_data = {
            'type': None,
            'fields': {}
        }
        for line in block.splitlines():
            if not block_data.get('type'):
                if line == '[Interface]':
                    block_data['type'] = 'Interface'
                elif line == '[Peer]':
                    block_data['type'] = 'Peer'
                else:
                    raise Exception(f'Unexpected block header: {line}')
                continue
            m = self._FIELD_RE.match(line)
            if m:
                field = m.groupdict()
                block_data['fields'][field['key']] = field['value']
            else:
                raise Exception(f'Invalid field: {line}')
        return block_data

    def _construct_block(self, block: dict) -> str:
        header = '[' + block['type'] + ']'
        fields = []
        for k, v in block['fields'].items():
            if v:
                fields.append(f'{k} = {v}')
        return '\n'.join([header, *fields])

    def _gen_psk(self):
        psk_proc = subprocess.run(['wg', 'genpsk'], stdout=subprocess.PIPE)
        if not psk_proc.stdout:
            raise Exception('Could not generate PSK')
        return psk_proc.stdout.decode('utf-8').rstrip('\n')

    def _get_pubkey(self):
        if self._interface is None:
            raise Exception('Interface missing')
        pubkey_proc = subprocess.Popen(
            ['wg', 'pubkey'],
            stdout=subprocess.PIPE,
            stdin=subprocess.PIPE
        )
        if not pubkey_proc.stdin:
            raise Exception('Could not generate public key')
        private_key = self._interface['fields']['PrivateKey'] + '\n'
        pubkey_proc.stdin.write(private_key.encode('utf-8'))
        pubkey_proc.stdin.close()
        if not pubkey_proc.stdout:
            raise Exception('Could not generate public key')
        return pubkey_proc.stdout.read().decode('utf-8').rstrip('\n')


class WireguardPeerServer(socketserver.UnixStreamServer):

    def server_bind(self):
        fd = self.socket.fileno()
        # restrict access to root before binding
        os.fchmod(fd, 0o600)
        super().server_bind()

    def server_activate(self):
        super().server_activate()
        addr = self.server_address
        if not isinstance(addr, str):
            raise Exception(f'Unexpected server_address: {addr}')
        # grant access to the wireguard_users group as well
        root_user = pwd.getpwnam('root')
        wireguard_users_group = grp.getgrnam('wireguard_users')
        os.chown(addr, root_user.pw_uid, wireguard_users_group.gr_gid)
        os.chmod(addr, 0o660)


class WireguardPeerRequestHandler(socketserver.StreamRequestHandler):

    def handle(self):
        line = self.rfile.readline()
        command = json.loads(line)
        self._handle_command(command)

    def _handle_command(self, command):
        result: Dict[str, Any] = {
            'status': None,
            'data': None
        }
        config = WireguardConfig()
        try:
            command_name = command['command']
            if command_name == 'add_peer':
                public_key = command['data']['public_key']
                result['data'] = config.add_peer(public_key)
            elif command_name == 'set_peer_endpoint':
                public_key = command['data']['public_key']
                preshared_key = command['data']['preshared_key']
                endpoint = command['data']['endpoint']
                result['data'] = config.set_peer_endpoint(public_key, preshared_key, endpoint)
            else:
                raise Exception(f'Unknown command: {command_name}')
            result['status'] = 'ok'
        except Exception as e:
            result['status'] = 'error'
            result['data'] = str(e)
        config.write()
        self.wfile.write(json.dumps(result).encode('utf-8') + b'\n')

def main():
    socket_path = '/run/wireguard_peer.sock'
    with contextlib.suppress(FileNotFoundError):
        os.remove(socket_path)
    server = WireguardPeerServer(socket_path, WireguardPeerRequestHandler)
    server.serve_forever()

if __name__ == '__main__':
    main()
