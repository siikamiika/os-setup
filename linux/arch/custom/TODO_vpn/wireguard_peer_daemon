#!/usr/bin/env python3

import os
import re
import contextlib
import socketserver
import pwd
import grp
import ipaddress
import subprocess

class WireguardConfig:
    _FIELD_RE = re.compile(r'^(?P<key>[a-zA-Z]+)\s*=\s*(?P<value>.+)$')

    def __init__(self):
        self._interface = None
        self._peers = {}
        self._parse()

    def write(self):
        if self._interface is None:
            raise Exception('Interface missing')
        with open('/etc/wireguard/wg0.conf', 'w') as f:
            block_sources = [self._interface, *self._peers.values()]
            blocks = map(self._construct_block, block_sources)
            f.write('\n\n'.join(blocks) + '\n')

    def has_peer(self, public_key: str) -> bool:
        return public_key in self._peers

    def add_peer(self, public_key: str, endpoint: str=None) -> dict:
        if public_key in self._peers:
            raise Exception(f'Peer already exists for public key {public_key}')
        psk_proc = subprocess.run(['wg', 'genpsk'], stdout=subprocess.PIPE)
        if not psk_proc.stdout:
            raise Exception('Could not generate PSK')
        psk = psk_proc.stdout.decode('utf-8').rstrip('\n')
        address = self._get_available_address()
        peer = {
            'type': 'Peer',
            'fields': {
                'PublicKey': public_key,
                'PresharedKey': psk,
                'AllowedIPs': str(address),
            }
        }
        if endpoint:
            peer['fields']['Endpoint'] = endpoint
        self._peers[public_key] = peer
        return peer

    def set_endpoint(self, public_key: str, endpoint: str):
        peer = self._peers[public_key]
        peer['fields']['Endpoint'] = endpoint

    def _get_available_address(self) -> ipaddress.IPv4Network:
        if self._interface is None:
            raise Exception('Interface missing')
        interface = ipaddress.IPv4Interface(self._interface['fields']['Address'])
        network = interface.network
        reserved = {interface.ip, network.network_address}
        for peer in self._peers.values():
            for peer_network in peer['fields']['AllowedIPs'].split(', '):
                peer_network = ipaddress.IPv4Network(peer_network)
                if peer_network.subnet_of(network):
                    reserved |= set(peer_network)
        for ip in network:
            if ip not in reserved:
                return ipaddress.IPv4Network(ip)
        raise Exception('Address space exhausted')

    def _parse(self):
        with open('/etc/wireguard/wg0.conf') as f:
            for block in f.read().split('\n\n'):
                parsed_block = self._parse_block(block)
                if parsed_block['type'] == 'Interface':
                    self._interface = parsed_block
                elif parsed_block['type'] == 'Peer':
                    self._peers[parsed_block]['PublicKey'] = parsed_block

    def _parse_block(self, block: str) -> dict:
        block_data = {
            'type': None,
            'fields': {}
        }
        for line in block.splitlines():
            if not block_data.get('type'):
                if line == '[Interface]':
                    block_data['type'] = 'Interface'
                elif line == '[Peer]':
                    block_data['type'] = 'Peer'
                else:
                    raise Exception(f'Unexpected block header: {line}')
                continue
            m = self._FIELD_RE.match(line)
            if m:
                field = m.groupdict()
                block_data['fields'][field['key']] = field['value']
            else:
                raise Exception(f'Invalid field: {line}')
        return block_data

    def _construct_block(self, block: dict) -> str:
        header = '[' + block['type'] + ']'
        fields = []
        for k, v in block['fields'].items():
            fields.append(f'{k} = {v}')
        return '\n'.join([header, *fields])


class WireguardPeerServer(socketserver.ThreadingMixIn, socketserver.UnixStreamServer):

    def server_bind(self):
        fd = self.socket.fileno()
        root_user = pwd.getpwnam('root')
        wireguard_users_group = grp.getgrnam('wireguard_users')
        os.fchown(fd, root_user.pw_uid, wireguard_users_group.gr_gid)
        os.fchmod(fd, 0o660)
        super().server_bind()


class WireguardPeerRequestHandler(socketserver.StreamRequestHandler):

    def handle(self):
        TODO

def main():
    socket_path = '/run/wireguard_add_peer.sock'
    with contextlib.suppress(FileNotFoundError):
        os.remove(socket_path)
    server = WireguardPeerServer(socket_path, WireguardPeerRequestHandler)
    server.serve_forever()

if __name__ == '__main__':
    main()
