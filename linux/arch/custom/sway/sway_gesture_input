#!/usr/bin/env python3

import subprocess
import re
import json
import time
import threading
import evdev
from evdev.ecodes import *


# https://stackoverflow.com/a/923034
def set_proc_name(newname):
    from ctypes import cdll, byref, create_string_buffer
    libc = cdll.LoadLibrary('libc.so.6')
    buff = create_string_buffer(len(newname)+1)
    buff.value = newname
    libc.prctl(15, byref(buff), 0, 0, 0)


class LibinputDebugEventReader:

    def get_events(self):
        proc = subprocess.Popen(
            ['unbuffer', 'libinput', 'debug-events'],
            stdout=subprocess.PIPE,
            bufsize=1,
            universal_newlines=True
        )
        for line in proc.stdout:
            parsed_event = self.parse_event(line)
            if parsed_event:
                yield parsed_event

    def parse_event(self, line):
        re_float = '[+-]?\d*\.\d*'
        m = re.match(
            rf'''
            \s*
            event\d+
            \s+
            (?P<type>
                GESTURE_SWIPE_UPDATE|GESTURE_SWIPE_END|POINTER_SCROLL_FINGER
            )
            \s+
            \+\d*\.\d*s
            \s+
            (?:
                (?P<fingers>
                    \d+
                )
                \s*
                (?:
                    $
                    |
                    cancelled
                    |
                    (?P<swipe_x>
                        {re_float}
                    )
                    \/\s?
                    (?P<swipe_y>
                        {re_float}
                    )
                )
                |
                vert\s+
                (?P<scroll_y>
                    {re_float}
                )
                \/.*?
                horiz\s+
                (?P<scroll_x>
                    {re_float}
                )
            )
            ''',
            line,
            re.VERBOSE
        )
        if m:
            event_type = m.group('type')
            if event_type == 'GESTURE_SWIPE_UPDATE':
                return {
                    'type': 'update',
                    'fingers': int(m.group('fingers')),
                    'swipe_x': float(m.group('swipe_x')),
                    'swipe_y': float(m.group('swipe_y')),
                }
            elif event_type == 'GESTURE_SWIPE_END':
                return {
                    'type': 'end',
                    'fingers': int(m.group('fingers')),
                }
            elif event_type == 'POINTER_SCROLL_FINGER':
                scroll_x, scroll_y = map(float, (m.group('scroll_x'), m.group('scroll_y')))
                if scroll_x == scroll_y == 0.0:
                    return {
                        'type': 'end',
                        'fingers': 2,
                    }
                return {
                    'type': 'update',
                    'fingers': 2,
                    'swipe_x': scroll_x,
                    'swipe_y': scroll_y,
                }


class GestureEventSource:

    EVENT_THRESHOLD = 100.0
    RELEASE_THRESHOLD_FACTOR = 0.1

    def __init__(self):
        self._state = {
            'started': None,
            'fingers': None,
            'pos_x': 0.0,
            'pos_y': 0.0,
            'threshold': GestureEventSource.EVENT_THRESHOLD,
            'events_triggered':  0,
        }
        self._event_reader = LibinputDebugEventReader()

    def listen(self):
        for event in self._event_reader.get_events():
            # TODO check if fingers is the same
            if event['type'] == 'update':
                if self._state['started'] is None:
                    self._state['started'] = time.time()
                    self._state['fingers'] = event['fingers']
                self._state['pos_x'] += event['swipe_x']
                self._state['pos_y'] += event['swipe_y']
                yield from self._consume()
            elif event['type'] == 'end':
                if self._state['events_triggered'] == 0:
                    self._state['threshold'] *= GestureEventSource.RELEASE_THRESHOLD_FACTOR
                    yield from self._consume(max_events=1)
                self._reset_state()

            yield from self._report_status()

    def _report_status(self):
        if abs(self._state['pos_x']) > 0.0:
            yield {
                'type': 'status',
                'axis': 'x',
                'fingers': self._state['fingers'],
                'pos': self._state['pos_x'] / self._state['threshold'],
            }
        elif abs(self._state['pos_y']) > 0.0:
            yield {
                'type': 'status',
                'axis': 'y',
                'fingers': self._state['fingers'],
                'pos': self._state['pos_y'] / self._state['threshold'],
            }

    def _consume(self, max_events=None):
        other_axis, consumed_axis = sorted(['pos_x', 'pos_y'], key=lambda a: abs(self._state[a]))
        self._state[other_axis] = 0.0
        while True:
            if self._state[consumed_axis] >= self._state['threshold']:
                self._state[consumed_axis] -= self._state['threshold']
                self._state['events_triggered'] += 1
                direction = 'right' if consumed_axis == 'pos_x' else 'down'
                yield {
                    'type': 'gesture',
                    'direction': direction,
                    'fingers': self._state['fingers'],
                    'single': max_events is not None,
                }
            elif self._state[consumed_axis] <= -self._state['threshold']:
                self._state[consumed_axis] += self._state['threshold']
                self._state['events_triggered'] += 1
                direction = 'left' if consumed_axis == 'pos_x' else 'up'
                yield {
                    'type': 'gesture',
                    'direction': direction,
                    'fingers': self._state['fingers'],
                    'single': max_events is not None,
                }
            else:
                break
            if max_events is not None:
                if max_events >= self._state['events_triggered']:
                    break

    def _reset_state(self):
        self._state['fingers'] = None
        self._state['started'] = None
        self._state['pos_x'] = 0.0
        self._state['pos_y'] = 0.0
        self._state['threshold'] = GestureEventSource.EVENT_THRESHOLD
        self._state['events_triggered'] = 0


class Sway:
    def __init__(self):
        self.focused_app = None
        threading.Thread(target=self._update_focused_app).start()

    def _update_focused_app(self):
        for app in self._listen_focused_app():
            self.focused_app = app

    def _listen_focused_app(self):
        p = subprocess.Popen(
            ['swaymsg', '-t', 'subscribe', '-m', '[ "window" ]'],
            stdout=subprocess.PIPE
        )
        for line in p.stdout:
            event = json.loads(line)
            if event['change'] != 'focus':
                continue
            container = event['container']
            if container['app_id']:
                # Wayland native
                yield container['app_id']
            else:
                # XWayland
                try:
                    yield container['window_properties']['class']
                except (KeyError, TypeError):
                    yield 'xwayland'

    def change_focus(self, direction):
        if direction in ['left', 'right', 'up', 'down']:
            subprocess.call(['swaymsg', 'focus', direction])

    def change_workspace(self, direction):
        if direction == 'left':
            subprocess.call(['swaymsg', 'workspace', 'prev_on_output'])
        elif direction == 'right':
            subprocess.call(['swaymsg', 'workspace', 'next_on_output'])


class VirtualInput:
    def __init__(self, capabilities, name):
        self._uinput = evdev.UInput(capabilities, name=name)

    def key(self, key, modifiers=[], wait_time=None):
        for modifier in modifiers:
            self._uinput.write(EV_KEY, modifier, 1)
            if wait_time:
                self._uinput.syn()
                time.sleep(wait_time)
        self._uinput.write(EV_KEY, key, 1)
        if wait_time:
            self._uinput.syn()
            time.sleep(wait_time)
        self._uinput.write(EV_KEY, key, 0)
        if wait_time:
            self._uinput.syn()
            time.sleep(wait_time)
        for modifier in modifiers:
            self._uinput.write(EV_KEY, modifier, 0)
            if wait_time:
                self._uinput.syn()
                time.sleep(wait_time)
        self._uinput.syn()

    def rel(self, code, val):
        self._uinput.write(EV_REL, code, val)
        self._uinput.syn()


class Wob:
    def __init__(self):
        self._process = subprocess.Popen(
            ['wob', '-a', 'bottom', '-t', '500'],
            stdin=subprocess.PIPE
        )

    def write(self, pos):
        if self._process.stdin:
            self._process.stdin.write((str(pos) + '\n').encode('utf-8'))
            self._process.stdin.flush()


class SwayGestureInput:

    def __init__(self):
        # single instance hack
        subprocess.call('pgrep -x sgi_hack | head -1 | xargs -r pkill -TERM -P', shell=True)
        set_proc_name(b'sgi_hack')

        self._virtual_input = VirtualInput({
            EV_KEY: [BTN_LEFT, BTN_RIGHT, BTN_MIDDLE,
                     BTN_SIDE, BTN_EXTRA, BTN_FORWARD,
                     KEY_LEFTCTRL, KEY_LEFTSHIFT, KEY_LEFTMETA, KEY_LEFTALT,
                     KEY_PAGEUP, KEY_PAGEDOWN, KEY_TAB,
                     KEY_W, KEY_T, KEY_R, KEY_F, KEY_Q, KEY_N, KEY_J, KEY_E,
                     KEY_F9,
                     KEY_BACK, KEY_FORWARD, KEY_LEFT, KEY_RIGHT],
            EV_REL: [REL_X, REL_Y, REL_WHEEL, REL_HWHEEL],
        }, name='sgi-virt-input')
        self._sway = Sway()
        self._ges = GestureEventSource()
        self._wob = Wob()

    def start(self):
        for event in self._ges.listen():
            if event['type'] == 'gesture':
                self._handle_gesture(event)
            elif event['type'] == 'status':
                self._handle_status(event)

    def _handle_gesture(self, event):
        if event['fingers'] == 2:
            pass
            # precise wheel to discrete event for container tab cycling
            # if event['direction'] == 'right':
            #     self._virtual_input.rel(REL_HWHEEL, 1)
            # elif event['direction'] == 'left':
            #     self._virtual_input.rel(REL_HWHEEL, -1)
        elif event['fingers'] == 3:
            # overload multi-event/single-event gestures
            if event['single']:
                # browser history
                if event['direction'] == 'left':
                    if self._sway.focused_app in ['Alacritty', 'imv']:
                        self._virtual_input.key(KEY_LEFT, wait_time=0.01)
                    elif self._sway.focused_app and self._sway.focused_app.startswith('steam_app_'):
                        self._virtual_input.key(KEY_J)
                    else:
                        self._virtual_input.key(KEY_BACK)
                elif event['direction'] == 'right':
                    if self._sway.focused_app in ['Alacritty', 'imv']:
                        self._virtual_input.key(KEY_RIGHT, wait_time=0.01)
                    elif self._sway.focused_app and self._sway.focused_app.startswith('steam_app_'):
                        self._virtual_input.key(KEY_E)
                    else:
                        self._virtual_input.key(KEY_FORWARD)
                # reopen/close tab
                elif event['direction'] == 'up':
                    if self._sway.focused_app == 'Alacritty':
                        self._virtual_input.key(KEY_T, [KEY_LEFTALT, KEY_LEFTSHIFT])
                    else:
                        self._virtual_input.key(KEY_T, [KEY_LEFTCTRL, KEY_LEFTSHIFT])
                elif event['direction'] == 'down':
                    if self._sway.focused_app in ['mpv', 'imv']:
                        self._virtual_input.key(KEY_Q)
                    elif self._sway.focused_app and self._sway.focused_app.startswith('steam_app_'):
                        self._virtual_input.key(KEY_F9)
                    else:
                        self._virtual_input.key(KEY_W, [KEY_LEFTCTRL])
            else:
                # cycle tabs
                if event['direction'] == 'left':
                    if self._sway.focused_app == 'Alacritty':
                        self._virtual_input.key(KEY_TAB, [KEY_LEFTSHIFT])
                    elif self._sway.focused_app == 'imv':
                        self._virtual_input.key(KEY_LEFT, wait_time=0.01)
                    else:
                        self._virtual_input.key(KEY_PAGEUP, [KEY_LEFTCTRL])
                elif event['direction'] == 'right':
                    if self._sway.focused_app == 'Alacritty':
                        self._virtual_input.key(KEY_TAB)
                    elif self._sway.focused_app == 'imv':
                        self._virtual_input.key(KEY_RIGHT, wait_time=0.01)
                    else:
                        self._virtual_input.key(KEY_PAGEDOWN, [KEY_LEFTCTRL])
                # toggle full screen
                elif event['direction'] == 'up':
                    self._virtual_input.key(KEY_F, [KEY_LEFTMETA])
                # reload
                elif event['direction'] == 'down':
                    self._virtual_input.key(KEY_R, [KEY_LEFTCTRL])
        elif event['fingers'] == 4:
            if event['single']:
                if event['direction'] == 'left':
                    self._sway.change_workspace('left')
                elif event['direction'] == 'right':
                    self._sway.change_workspace('right')
                elif event['direction'] == 'up':
                    if self._sway.focused_app == 'firefoxdeveloperedition':
                        # reopen window
                        self._virtual_input.key(KEY_N, [KEY_LEFTCTRL, KEY_LEFTSHIFT])
                elif event['direction'] == 'down':
                    if self._sway.focused_app == 'firefoxdeveloperedition':
                        # close window
                        self._virtual_input.key(KEY_W, [KEY_LEFTCTRL, KEY_LEFTSHIFT])
            else:
                if event['direction'] == 'left':
                    self._sway.change_focus('left')
                elif event['direction'] == 'right':
                    self._sway.change_focus('right')
                elif event['direction'] == 'up':
                    self._sway.change_focus('up')
                elif event['direction'] == 'down':
                    self._sway.change_focus('down')

    def _handle_status(self, event):
        # ignore regular scroll
        if event['fingers'] == 2:
            return
        pos = int(max(min(((event['pos'] + 1) / 2) * 100, 100), 0))
        self._wob.write(pos)


def main():
    sgi = SwayGestureInput()
    sgi.start()

if __name__ == '__main__':
    main()
